{"version":3,"sources":["TodoItems.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","key","delete","item","_this2","react_default","a","createElement","text","onClick","className","date","listItems","entries","map","react_flip_move_es","duration","easing","Component","TodoList","state","items","addItem","deleteItem","e","Date","getDate","month","getMonth","year","getFullYear","hours","getHours","min","getMinutes","sec","getSeconds","counter","_inputElement","value","newItem","now","id","setState","prevState","concat","console","log","preventDefault","filteredItems","filter","onSubmit","ref","placeholder","type","src_TodoItems","App","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a766f4c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport FlipMove from \"react-flip-move\";\n\nclass TodoItems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createTasks = this.createTasks.bind(this);\n  }\n\n  delete(key) {\n    this.props.delete(key);\n  }\n\n  createTasks(item) {\n    return (\n     \n         <li key={item.key}>\n        {item.text}\n        <i onClick={() => this.delete(item.key)}>x</i>  \n        <p className=\"date\">{item.date}</p>      \n      </li>\n      \n     \n    );\n  }\n\n  render() {\n    var todoEntries = this.props.entries;\n    var listItems = todoEntries.map(this.createTasks);\n\n    return (\n      <ul className=\"theList\">\n        <FlipMove duration={250} easing=\"ease-out\">\n          {listItems}\n        </FlipMove>\n      </ul>\n    );\n  }\n}\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport TodoItems from \"./TodoItems\";\n\nclass TodoList extends Component {\n\n \n\n  constructor(props) {\n    super(props);    \n    \n    this.state = {\n      items: []\n    };    \n\n    Â this.addItem = this.addItem.bind(this);   \n     this.deleteItem = this.deleteItem.bind(this);\n      \n\n  }\n\n  \n  \n  \n  addItem(e) {\n    var date = new Date().getDate(); //Current Date\n    var month = new Date().getMonth() + 1; //Current Month\n    var year = new Date().getFullYear(); //Current Year\n    var hours = new Date().getHours(); //Current Hours\n    var min = new Date().getMinutes(); //Current Minutes\n    var sec = new Date().getSeconds(); //Current Seconds\n   \n    let counter = 1;\n\n    if (this._inputElement.value !== \"\") {\n      var newItem = {\n        text: this._inputElement.value,\n        key: Date.now(),\n        date:  date + '/' + month + '/' + year + ' ' + hours + ':' + min + ':' + sec,\n        id: counter++\n      };\n   \n      this.setState((prevState) => {\n        return { \n          items: prevState.items.concat(newItem) \n        };\n      });\n     \n      this._inputElement.value = \"\";\n      \n    }\n     \n    console.log(this.state.items);\n       \n    e.preventDefault();\n  };\n\n  deleteItem(key) {\n    var filteredItems = this.state.items.filter(function (item) {\n      return (item.key !== key);\n    });\n   \n    this.setState({\n      items: filteredItems\n    });\n  }\n\n  \n  render() {\n    return (\n      <div className=\"todoListMain\">\n        <div className=\"header\">\n          <form onSubmit={this.addItem}>\n            <input ref={(a) => this._inputElement = a} placeholder=\"Enter task\">\n            </input>\n            <button type=\"submit\">Add</button>\n          </form>\n        </div>\n        <TodoItems entries={this.state.items} delete={this.deleteItem}/>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList'\n\n// css\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div >\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}